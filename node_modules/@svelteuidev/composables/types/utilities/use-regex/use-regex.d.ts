import type { LiteralUnion } from 'type-fest';
declare type PatternBankPatterns = 'getAllOf';
declare type PatternBank = Array<PatternBankItem>;
interface PatternBankItem {
    name: LiteralUnion<PatternBankPatterns, string>;
    pattern: string;
}
interface UseRegexOptions {
    test?: boolean;
    testType: 'test' | 'search' | 'match' | 'match-all';
    testString: string;
}
declare type useRegexFn = (name: LiteralUnion<PatternBankPatterns, string>, matcher: string, options?: UseRegexOptions) => any;
declare type useRegexFactoryFn = (extensions: PatternBank) => useRegexFn;
export declare function useRegexFactory(extensions?: PatternBank): ReturnType<useRegexFactoryFn>;
export {};
