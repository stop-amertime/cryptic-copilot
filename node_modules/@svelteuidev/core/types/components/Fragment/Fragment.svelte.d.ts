import { SvelteComponentTyped } from "svelte";
import type { FragmentProps as $$FragmentProps } from './Fragment.styles';
declare const __propDef: {
    props: {
        [x: string]: any;
        mode?: $$FragmentProps['mode'];
        context?: $$FragmentProps['context'];
        onCreate?: Fn<unknown, unknown>;
        onMountFn?: Fn<unknown, unknown>;
        beforeUpdateFn?: Fn<unknown, unknown>;
        afterUpdateFn?: Fn<unknown, unknown>;
        onDestroyFn?: Fn<unknown, unknown>;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {
            [x: string]: any;
        };
    };
};
export declare type FragmentProps = typeof __propDef.props;
export declare type FragmentEvents = typeof __propDef.events;
export declare type FragmentSlots = typeof __propDef.slots;
/**
 * Fragments let you group a list of children without adding extra nodes to the DOM. It also allows you to test lifecycle methods, state, or context without needing to create a new component.
 *
 * @see https://svelteui.org/core/fragment
 * @example
 *    ```svelte
 * // alternative to <svelte:fragment>
 * <Fragment slot='myslot'>
 * 	<div>Child 1</div>
 * 	<div>Child 2</div>
 * 	<div>Child 3</div>
 * </Fragment>
 *
 * // lifecyle usage
 * <Fragment
 * 	onCreate={() => {
 * 		setContext('some context key', theValue)
 * 	}}
 * >
 *     children can now access this context value
 *  	</Fragment>
 *    ```
 */
export default class Fragment extends SvelteComponentTyped<FragmentProps, FragmentEvents, FragmentSlots> {
}
export {};
