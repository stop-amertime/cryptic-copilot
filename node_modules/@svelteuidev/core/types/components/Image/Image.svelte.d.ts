import { SvelteComponentTyped } from "svelte";
import type { ImageProps as $$ImageProps } from './Image.styles';
declare const __propDef: {
    props: {
        [x: string]: any;
        use?: $$ImageProps['use'];
        element?: $$ImageProps['element'];
        override?: $$ImageProps['override'];
        radius?: $$ImageProps['radius'];
        class?: string;
        src?: $$ImageProps['src'];
        alt?: $$ImageProps['alt'];
        fit?: $$ImageProps['fit'];
        width?: $$ImageProps['width'];
        height?: $$ImageProps['height'];
        caption?: $$ImageProps['caption'];
        usePlaceholder?: $$ImageProps['usePlaceholder'];
        loader?: $$ImageProps['loader'];
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        placeholder: {};
    };
};
export declare type ImageProps = typeof __propDef.props;
export declare type ImageEvents = typeof __propDef.events;
export declare type ImageSlots = typeof __propDef.slots;
/**
 * Dynamic Image component with optional placeholder for loading and error state
 *
 * @see https://svelteui.org/core/image
 * @example
 * ```tsx
 * <Image src="https://images.unsplash.com/photo-1561046259-7d5b6e929ba0"/> // standard image
 * <Image src="https://images.unsplash.com/photo-1561046259-7d5b6e929ba0" alt="Doggo" width={100} caption="Very cool doggo" /> // standard image with width and caption
 * <Image src="" alt="Doggo" usePlaceholder /> // standard image that shows placeholder when it fails to load
 * ```
 */
export default class Image extends SvelteComponentTyped<ImageProps, ImageEvents, ImageSlots> {
}
export {};
