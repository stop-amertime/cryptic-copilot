import { SvelteComponentTyped } from "svelte";
import type { ThemeIconProps as $$ThemeIconProps } from './ThemeIcon.styles';
declare const __propDef: {
    props: {
        [x: string]: any;
        use?: $$ThemeIconProps['use'];
        element?: $$ThemeIconProps['element'];
        class?: string;
        override?: $$ThemeIconProps['override'];
        size?: $$ThemeIconProps['size'];
        radius?: $$ThemeIconProps['radius'];
        color?: $$ThemeIconProps['color'];
        variant?: $$ThemeIconProps['variant'];
        gradient?: $$ThemeIconProps['gradient'];
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type ThemeIconProps = typeof __propDef.props;
export declare type ThemeIconEvents = typeof __propDef.events;
export declare type ThemeIconSlots = typeof __propDef.slots;
/**
 * **UNSTABLE:** new API, yet to be vetted.
 *
 * Render icon inside element with theme colors
 *
 * @see https://svelteui.org/core/theme-icon
 * @example
 *    ```svelte
 *    <ThemeIcon>
 *      <Icon />
 *    </ThemeIcon>
 *
 * <ThemeIcon size="lg" variant="gradient" gradient={{ from: 'indigo', to: 'cyan' }}>
 *        <Icon size={20} />
 *    </ThemeIcon>
 *    ```
 */
export default class ThemeIcon extends SvelteComponentTyped<ThemeIconProps, ThemeIconEvents, ThemeIconSlots> {
}
export {};
