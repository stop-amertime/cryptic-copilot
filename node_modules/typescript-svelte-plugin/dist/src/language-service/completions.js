"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decorateCompletions = void 0;
const path_1 = require("path");
const utils_1 = require("../utils");
const componentPostfix = '__SvelteComponent_';
function decorateCompletions(ls, logger) {
    const getCompletionsAtPosition = ls.getCompletionsAtPosition;
    ls.getCompletionsAtPosition = (fileName, position, options) => {
        const completions = getCompletionsAtPosition(fileName, position, options);
        if (!completions) {
            return completions;
        }
        return {
            ...completions,
            entries: completions.entries.map((entry) => {
                if (!(0, utils_1.isSvelteFilePath)(entry.source || '') ||
                    !entry.name.endsWith(componentPostfix)) {
                    return entry;
                }
                return {
                    ...entry,
                    name: entry.name.slice(0, -componentPostfix.length)
                };
            })
        };
    };
    const getCompletionEntryDetails = ls.getCompletionEntryDetails;
    ls.getCompletionEntryDetails = (fileName, position, entryName, formatOptions, source, preferences, data) => {
        var _a, _b, _c, _d;
        let is$typeImport = false;
        const originalSource = source;
        const originalData = data ? { ...data } : undefined;
        if ((0, path_1.basename)(fileName).startsWith('+') && (source === null || source === void 0 ? void 0 : source.includes('.svelte-kit/types'))) {
            // resolve path from FileName to svelte-kit/types
            // src/routes/foo/+page.svelte -> .svelte-kit/types/foo/$types.d.ts
            const routesFolder = 'src/routes'; // TODO somehow get access to kit.files.routes in here
            const relativeFileName = (_a = fileName.split(routesFolder)[1]) === null || _a === void 0 ? void 0 : _a.slice(1);
            if (relativeFileName) {
                is$typeImport = true;
                source =
                    source.split('.svelte-kit/types')[0] +
                        // note the missing .d.ts at the end - TS wants it that way for some reason
                        `.svelte-kit/types/${routesFolder}/${(0, path_1.dirname)(relativeFileName)}/$types`;
                if (data) {
                    data.fileName = (_b = data.fileName) === null || _b === void 0 ? void 0 : _b.replace(originalSource, source);
                    data.moduleSpecifier = (_c = data.moduleSpecifier) === null || _c === void 0 ? void 0 : _c.replace(originalSource, source);
                }
            }
        }
        let details = getCompletionEntryDetails(fileName, position, entryName, formatOptions, source, preferences, data);
        if (!details && is$typeImport) {
            // Try again
            is$typeImport = false;
            details = getCompletionEntryDetails(fileName, position, entryName, formatOptions, originalSource, preferences, originalData);
        }
        if (details) {
            if (is$typeImport) {
                details.codeActions = (_d = details.codeActions) === null || _d === void 0 ? void 0 : _d.map((codeAction) => {
                    codeAction.description = adjustPath(codeAction.description);
                    codeAction.changes = codeAction.changes.map((change) => {
                        change.textChanges = change.textChanges.map((textChange) => {
                            textChange.newText = adjustPath(textChange.newText);
                            return textChange;
                        });
                        return change;
                    });
                    return codeAction;
                });
                return details;
            }
            else if ((0, utils_1.isSvelteFilePath)(source || '')) {
                logger.debug('TS found Svelte Component import completion details');
                return (0, utils_1.replaceDeep)(details, componentPostfix, '');
            }
            else {
                return details;
            }
        }
        if (!(0, utils_1.isSvelteFilePath)(source || '')) {
            return details;
        }
        // In the completion list we removed the component postfix. Internally,
        // the language service saved the list with the postfix, so details
        // won't match anything. Therefore add it back and remove it afterwards again.
        const svelteDetails = getCompletionEntryDetails(fileName, position, entryName + componentPostfix, formatOptions, source, preferences, data);
        if (!svelteDetails) {
            return undefined;
        }
        logger.debug('Found Svelte Component import completion details');
        return (0, utils_1.replaceDeep)(svelteDetails, componentPostfix, '');
    };
}
exports.decorateCompletions = decorateCompletions;
function adjustPath(path) {
    return path.replace(/(['"])(.+?)['"]/, 
    // .js logic for node16 module resolution
    (_match, quote, path) => `${quote}./$types${path.endsWith('.js') ? '.js' : ''}${quote}`);
}
//# sourceMappingURL=completions.js.map