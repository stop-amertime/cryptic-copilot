"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchModuleLoader = void 0;
const svelte_sys_1 = require("./svelte-sys");
const utils_1 = require("./utils");
/**
 * Caches resolved modules.
 */
class ModuleResolutionCache {
    constructor() {
        this.cache = new Map();
    }
    /**
     * Tries to get a cached module.
     */
    get(moduleName, containingFile) {
        return this.cache.get(this.getKey(moduleName, containingFile));
    }
    /**
     * Caches resolved module, if it is not undefined.
     */
    set(moduleName, containingFile, resolvedModule) {
        if (!resolvedModule) {
            return;
        }
        this.cache.set(this.getKey(moduleName, containingFile), resolvedModule);
    }
    /**
     * Deletes module from cache. Call this if a file was deleted.
     * @param resolvedModuleName full path of the module
     */
    delete(resolvedModuleName) {
        this.cache.forEach((val, key) => {
            if (val.resolvedFileName === resolvedModuleName) {
                this.cache.delete(key);
            }
        });
    }
    clear() {
        this.cache.clear();
    }
    getKey(moduleName, containingFile) {
        return containingFile + ':::' + (0, utils_1.ensureRealSvelteFilePath)(moduleName);
    }
}
/**
 * Creates a module loader than can also resolve `.svelte` files.
 *
 * The typescript language service tries to look up other files that are referenced in the currently open svelte file.
 * For `.ts`/`.js` files this works, for `.svelte` files it does not by default.
 * Reason: The typescript language service does not know about the `.svelte` file ending,
 * so it assumes it's a normal typescript file and searches for files like `../Component.svelte.ts`, which is wrong.
 * In order to fix this, we need to wrap typescript's module resolution and reroute all `.svelte.ts` file lookups to .svelte.
 */
function patchModuleLoader(logger, snapshotManager, typescript, lsHost, project, configManager) {
    var _a;
    const svelteSys = (0, svelte_sys_1.createSvelteSys)(logger);
    const moduleCache = new ModuleResolutionCache();
    const origResolveModuleNames = (_a = lsHost.resolveModuleNames) === null || _a === void 0 ? void 0 : _a.bind(lsHost);
    lsHost.resolveModuleNames = resolveModuleNames;
    const origRemoveFile = project.removeFile.bind(project);
    project.removeFile = (info, fileExists, detachFromProject) => {
        logger.log('File is being removed. Delete from cache: ', info.fileName);
        moduleCache.delete(info.fileName);
        return origRemoveFile(info, fileExists, detachFromProject);
    };
    configManager.onConfigurationChanged(() => {
        moduleCache.clear();
    });
    function resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions, containingSourceFile) {
        logger.log('Resolving modules names for ' + containingFile);
        // Try resolving all module names with the original method first.
        // The ones that are undefined will be re-checked if they are a
        // Svelte file and if so, are resolved, too. This way we can defer
        // all module resolving logic except for Svelte files to TypeScript.
        const resolved = (origResolveModuleNames === null || origResolveModuleNames === void 0 ? void 0 : origResolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions, containingSourceFile)) || Array.from(Array(moduleNames.length));
        if (!configManager.getConfig().enable) {
            return resolved;
        }
        return resolved.map((moduleName, idx) => {
            const fileName = moduleNames[idx];
            if (moduleName || !(0, utils_1.ensureRealSvelteFilePath)(fileName).endsWith('.svelte')) {
                return moduleName;
            }
            const cachedModule = moduleCache.get(fileName, containingFile);
            if (cachedModule) {
                return cachedModule;
            }
            const resolvedModule = resolveSvelteModuleName(fileName, containingFile, compilerOptions);
            moduleCache.set(fileName, containingFile, resolvedModule);
            return resolvedModule;
        });
    }
    function resolveSvelteModuleName(name, containingFile, compilerOptions) {
        const svelteResolvedModule = typescript.resolveModuleName(name, containingFile, compilerOptions, svelteSys
        // don't set mode or else .svelte imports couldn't be resolved
        ).resolvedModule;
        if (!svelteResolvedModule ||
            !(0, utils_1.isVirtualSvelteFilePath)(svelteResolvedModule.resolvedFileName)) {
            return svelteResolvedModule;
        }
        const resolvedFileName = (0, utils_1.ensureRealSvelteFilePath)(svelteResolvedModule.resolvedFileName);
        logger.log('Resolved', name, 'to Svelte file', resolvedFileName);
        const snapshot = snapshotManager.create(resolvedFileName);
        if (!snapshot) {
            return undefined;
        }
        const resolvedSvelteModule = {
            extension: snapshot.isTsFile ? typescript.Extension.Ts : typescript.Extension.Js,
            resolvedFileName
        };
        return resolvedSvelteModule;
    }
}
exports.patchModuleLoader = patchModuleLoader;
//# sourceMappingURL=module-loader.js.map